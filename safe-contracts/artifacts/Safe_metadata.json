{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "AddedOwner",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "approvedHash",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ApproveHash",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "handler",
						"type": "address"
					}
				],
				"name": "ChangedFallbackHandler",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "guard",
						"type": "address"
					}
				],
				"name": "ChangedGuard",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "moduleGuard",
						"type": "address"
					}
				],
				"name": "ChangedModuleGuard",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "threshold",
						"type": "uint256"
					}
				],
				"name": "ChangedThreshold",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "DisabledModule",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "EnabledModule",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "txHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					}
				],
				"name": "ExecutionFailure",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "ExecutionFromModuleFailure",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "ExecutionFromModuleSuccess",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "txHash",
						"type": "bytes32"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					}
				],
				"name": "ExecutionSuccess",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "RemovedOwner",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "SafeReceived",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "initiator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address[]",
						"name": "owners",
						"type": "address[]"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "threshold",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "initializer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "fallbackHandler",
						"type": "address"
					}
				],
				"name": "SafeSetup",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "msgHash",
						"type": "bytes32"
					}
				],
				"name": "SignMsg",
				"type": "event"
			},
			{
				"stateMutability": "nonpayable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "VERSION",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"name": "addOwnerWithThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "hashToApprove",
						"type": "bytes32"
					}
				],
				"name": "approveHash",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "approvedHashes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"name": "changeThreshold",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "signatures",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "requiredSignatures",
						"type": "uint256"
					}
				],
				"name": "checkNSignatures",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "executor",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "dataHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "signatures",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "requiredSignatures",
						"type": "uint256"
					}
				],
				"name": "checkNSignatures",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "signatures",
						"type": "bytes"
					}
				],
				"name": "checkSignatures",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "dataHash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "signatures",
						"type": "bytes"
					}
				],
				"name": "checkSignatures",
				"outputs": [],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "prevModule",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "disableModule",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "domainSeparator",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "enableModule",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "enum Enum.Operation",
						"name": "operation",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "safeTxGas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "baseGas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasPrice",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "gasToken",
						"type": "address"
					},
					{
						"internalType": "address payable",
						"name": "refundReceiver",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "signatures",
						"type": "bytes"
					}
				],
				"name": "execTransaction",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "enum Enum.Operation",
						"name": "operation",
						"type": "uint8"
					}
				],
				"name": "execTransactionFromModule",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "enum Enum.Operation",
						"name": "operation",
						"type": "uint8"
					}
				],
				"name": "execTransactionFromModuleReturnData",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "bytes",
						"name": "returnData",
						"type": "bytes"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "start",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "pageSize",
						"type": "uint256"
					}
				],
				"name": "getModulesPaginated",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "array",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "next",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOwners",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "offset",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "getStorageAt",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getThreshold",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "enum Enum.Operation",
						"name": "operation",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "safeTxGas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "baseGas",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasPrice",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "gasToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "refundReceiver",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_nonce",
						"type": "uint256"
					}
				],
				"name": "getTransactionHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "module",
						"type": "address"
					}
				],
				"name": "isModuleEnabled",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "isOwner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nonce",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "prevOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					}
				],
				"name": "removeOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "handler",
						"type": "address"
					}
				],
				"name": "setFallbackHandler",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "guard",
						"type": "address"
					}
				],
				"name": "setGuard",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "moduleGuard",
						"type": "address"
					}
				],
				"name": "setModuleGuard",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_owners",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "_threshold",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "address",
						"name": "fallbackHandler",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "paymentToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "address payable",
						"name": "paymentReceiver",
						"type": "address"
					}
				],
				"name": "setup",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "signedMessages",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "targetContract",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "calldataPayload",
						"type": "bytes"
					}
				],
				"name": "simulateAndRevert",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "prevOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "swapOwner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"author": "Stefan George - @Georgi87Richard Meissner - @rmeissner",
			"details": "Most important concepts:      - Threshold: Number of required confirmations for a Safe transaction.      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and        approve transactions. Managed in `OwnerManager`.      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.      - Nonce: Each transaction should have a different nonce to prevent replay attacks.      - Signature: A valid signature of an owner of the Safe for a transaction hash.      - Guards: Guards are contracts that can execute pre- and post- transaction checks. There are two types of guards:          1. Transaction Guard: managed in `GuardManager` for transactions executed with `execTransaction`.          2. Module Guard: managed in `ModuleManager` for transactions executed with `execTransactionFromModule`      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/      For the events-based implementation see `SafeL2.sol`.",
			"kind": "dev",
			"methods": {
				"addOwnerWithThreshold(address,uint256)": {
					"details": "This can only be done via a Safe transaction.",
					"params": {
						"_threshold": "New threshold.",
						"owner": "New owner address."
					}
				},
				"approveHash(bytes32)": {
					"details": "This can be used with a pre-approved hash transaction signature.      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures",
					"params": {
						"hashToApprove": "The hash to mark as approved for signatures that are verified by this contract."
					}
				},
				"changeThreshold(uint256)": {
					"details": "This can only be done via a Safe transaction.",
					"params": {
						"_threshold": "New threshold."
					}
				},
				"checkNSignatures(address,bytes32,bytes,uint256)": {
					"details": "Since the EIP-1271 does an external call, be mindful of reentrancy attacks.",
					"params": {
						"dataHash": "Hash of the data (could be either a message hash or transaction hash)",
						"executor": "Address that executing the transaction.        ⚠️⚠️⚠️ Make sure that the executor address is a legitmate executor.        Incorrectly passed the executor might reduce the threshold by 1 signature. ⚠️⚠️⚠️",
						"requiredSignatures": "Amount of required valid signatures.",
						"signatures": "Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."
					}
				},
				"checkNSignatures(bytes32,bytes,bytes,uint256)": {
					"details": "This function is provided for compatibility with previous versions.      Use `checkNSignatures(address,bytes32,bytes,uint256)` instead.",
					"params": {
						"data": "**IGNORED** The data pre-image.",
						"dataHash": "Hash of the data (could be either a message hash or transaction hash)",
						"requiredSignatures": "Amount of required valid signatures.",
						"signatures": "Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."
					}
				},
				"checkSignatures(bytes32,bytes)": {
					"params": {
						"dataHash": "Hash of the data (could be either a message hash or transaction hash)",
						"signatures": "Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."
					}
				},
				"checkSignatures(bytes32,bytes,bytes)": {
					"details": "This function is provided for compatibility with previous versions.      Use `checkSignatures(bytes32,bytes)` instead.",
					"params": {
						"data": "**IGNORED** The data pre-image.",
						"dataHash": "Hash of the data (could be either a message hash or transaction hash).",
						"signatures": "Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash."
					}
				},
				"disableModule(address,address)": {
					"details": "This can only be done via a Safe transaction.",
					"params": {
						"module": "Module to be removed.",
						"prevModule": "Previous module in the modules linked list."
					}
				},
				"domainSeparator()": {
					"details": "Returns the domain separator for this contract, as defined in the EIP-712 standard.",
					"returns": {
						"_0": "bytes32 The domain separator hash."
					}
				},
				"enableModule(address)": {
					"details": "This can only be done via a Safe transaction.",
					"params": {
						"module": "Module to be whitelisted."
					}
				},
				"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)": {
					"details": "The fees are always transferred, even if the user transaction fails.      This method doesn't perform any sanity check of the transaction, such as:      - if the contract at `to` address has code or not      - if the `gasToken` is a contract or not      It is the responsibility of the caller to perform such checks.",
					"params": {
						"baseGas": "Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)",
						"data": "Data payload of Safe transaction.",
						"gasPrice": "Gas price that should be used for the payment calculation.",
						"gasToken": "Token address (or 0 if ETH) that is used for the payment.",
						"operation": "Operation type of Safe transaction.",
						"refundReceiver": "Address of receiver of gas payment (or 0 if tx.origin).",
						"safeTxGas": "Gas that should be used for the Safe transaction.",
						"signatures": "Signature data that should be verified.                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.",
						"to": "Destination address of Safe transaction.",
						"value": "Ether value of Safe transaction."
					},
					"returns": {
						"success": "Boolean indicating transaction's success."
					}
				},
				"execTransactionFromModule(address,uint256,bytes,uint8)": {
					"params": {
						"data": "Data payload of module transaction.",
						"operation": "Operation type of module transaction.",
						"to": "Destination address of module transaction.",
						"value": "Ether value of module transaction."
					},
					"returns": {
						"success": "Boolean flag indicating if the call succeeded."
					}
				},
				"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": {
					"params": {
						"data": "Data payload of module transaction.",
						"operation": "Operation type of module transaction.",
						"to": "Destination address of module transaction.",
						"value": "Ether value of module transaction."
					},
					"returns": {
						"returnData": "Data returned by the call.",
						"success": "Boolean flag indicating if the call succeeded."
					}
				},
				"getModulesPaginated(address,uint256)": {
					"params": {
						"pageSize": "Maximum number of modules that should be returned. Has to be > 0",
						"start": "Start of the page. Has to be a module or start pointer (0x1 address)"
					},
					"returns": {
						"array": "Array of modules.",
						"next": "Start of the next page."
					}
				},
				"getOwners()": {
					"returns": {
						"_0": "Array of Safe owners."
					}
				},
				"getStorageAt(uint256,uint256)": {
					"params": {
						"length": "- the number of words (32 bytes) of data to read",
						"offset": "- the offset in the current contract's storage in words to start reading from"
					},
					"returns": {
						"_0": "the bytes that were read."
					}
				},
				"getThreshold()": {
					"returns": {
						"_0": "Threshold number."
					}
				},
				"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": {
					"params": {
						"_nonce": "Transaction nonce.",
						"baseGas": "Gas costs for data used to trigger the safe transaction.",
						"data": "Data payload.",
						"gasPrice": "Maximum gas price that should be used for this transaction.",
						"gasToken": "Token address (or 0 if ETH) that is used for the payment.",
						"operation": "Operation type.",
						"refundReceiver": "Address of receiver of gas payment (or 0 if tx.origin).",
						"safeTxGas": "Gas that should be used for the safe transaction.",
						"to": "Destination address.",
						"value": "Ether value."
					},
					"returns": {
						"_0": "Transaction hash."
					}
				},
				"isModuleEnabled(address)": {
					"returns": {
						"_0": "True if the module is enabled"
					}
				},
				"isOwner(address)": {
					"returns": {
						"_0": "Boolean if owner is an owner of the Safe."
					}
				},
				"removeOwner(address,address,uint256)": {
					"details": "This can only be done via a Safe transaction.",
					"params": {
						"_threshold": "New threshold.",
						"owner": "Owner address to be removed.",
						"prevOwner": "Owner that pointed to the owner to be removed in the linked list"
					}
				},
				"setFallbackHandler(address)": {
					"details": "Only fallback calls without value and with data will be forwarded.      This can only be done via a Safe transaction.      Cannot be set to the Safe itself.",
					"params": {
						"handler": "contract to handle fallback calls."
					}
				},
				"setGuard(address)": {
					"details": "Set a guard that checks transactions before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,        a broken guard can cause a denial of service for the Safe. Make sure to carefully        audit the guard code and design recovery mechanisms.",
					"params": {
						"guard": "The address of the guard to be used or the 0 address to disable the guard"
					}
				},
				"setModuleGuard(address)": {
					"details": "Set a module guard that checks transactions initiated by the module before execution      This can only be done via a Safe transaction.      ⚠️ IMPORTANT: Since a module guard has full power to block Safe transaction execution initiatied via a module,        a broken module guard can cause a denial of service for the Safe modules. Make sure to carefully        audit the module guard code and design recovery mechanisms.",
					"params": {
						"moduleGuard": "The address of the module guard to be used or the zero address to disable the module guard."
					}
				},
				"setup(address[],uint256,address,bytes,address,address,uint256,address)": {
					"details": "This method can only be called once.      If a proxy was created without setting up, anyone can call setup and claim the proxy.",
					"params": {
						"_owners": "List of Safe owners.",
						"_threshold": "Number of required confirmations for a Safe transaction.",
						"data": "Data payload for optional delegate call.",
						"fallbackHandler": "Handler for fallback calls to this contract",
						"payment": "Value that should be paid",
						"paymentReceiver": "Address that should receive the payment (or 0 if tx.origin)",
						"paymentToken": "Token that should be used for the payment (0 is ETH)",
						"to": "Contract address for optional delegate call."
					}
				},
				"simulateAndRevert(address,bytes)": {
					"details": "Performs a delegatecall on a targetContract in the context of self. Internally reverts execution to avoid side effects (making it static). This method reverts with data equal to `abi.encode(bool(success), bytes(response))`. Specifically, the `returndata` after a call to this method will be: `success:bool || response.length:uint256 || response:bytes`.",
					"params": {
						"calldataPayload": "Calldata that should be sent to the target contract (encoded method name and arguments).",
						"targetContract": "Address of the contract containing the code to execute."
					}
				},
				"swapOwner(address,address,address)": {
					"details": "This can only be done via a Safe transaction.",
					"params": {
						"newOwner": "New owner address.",
						"oldOwner": "Owner address to be replaced.",
						"prevOwner": "Owner that pointed to the owner to be replaced in the linked list"
					}
				}
			},
			"stateVariables": {
				"VERSION": {
					"return": "Version string.",
					"returns": {
						"_0": "Version string."
					}
				},
				"approvedHashes": {
					"params": {
						"messageHash": "Hash of message that should be checked.",
						"owner": "Owner address that should be checked."
					},
					"return": "Number denoting if an owner approved the hash.",
					"returns": {
						"_0": "Number denoting if an owner approved the hash."
					}
				},
				"nonce": {
					"return": "Nonce.",
					"returns": {
						"_0": "Nonce."
					}
				},
				"signedMessages": {
					"params": {
						"messageHash": "Hash of message that should be checked."
					},
					"return": "Number denoting if an owner signed the hash.",
					"returns": {
						"_0": "Number denoting if an owner signed the hash."
					}
				}
			},
			"title": "Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"VERSION()": {
					"notice": "Returns the version of the Safe contract."
				},
				"addOwnerWithThreshold(address,uint256)": {
					"notice": "Adds the owner `owner` to the Safe and updates the threshold to `_threshold`."
				},
				"approveHash(bytes32)": {
					"notice": "Marks hash `hashToApprove` as approved."
				},
				"approvedHashes(address,bytes32)": {
					"notice": "Returns a uint if the messageHash is approved by the owner."
				},
				"changeThreshold(uint256)": {
					"notice": "Changes the threshold of the Safe to `_threshold`."
				},
				"checkNSignatures(address,bytes32,bytes,uint256)": {
					"notice": "Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."
				},
				"checkNSignatures(bytes32,bytes,bytes,uint256)": {
					"notice": "Checks whether the signature provided is valid for the provided hash. Reverts otherwise.         The `data` parameter is completely ignored during signature verification."
				},
				"checkSignatures(bytes32,bytes)": {
					"notice": "Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise."
				},
				"checkSignatures(bytes32,bytes,bytes)": {
					"notice": "Checks whether the signature provided is valid for the provided hash. Reverts otherwise.         The `data` parameter is completely ignored during signature verification."
				},
				"disableModule(address,address)": {
					"notice": "Disables the module `module` for the Safe."
				},
				"enableModule(address)": {
					"notice": "Enables the module `module` for the Safe."
				},
				"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)": {
					"notice": "Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`."
				},
				"execTransactionFromModule(address,uint256,bytes,uint8)": {
					"notice": "Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)"
				},
				"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": {
					"notice": "Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data"
				},
				"getModulesPaginated(address,uint256)": {
					"notice": "Returns an array of modules.         If all entries fit into a single page, the next pointer will be 0x1.         If another page is present, next will be the last element of the returned array."
				},
				"getOwners()": {
					"notice": "Returns a list of Safe owners."
				},
				"getStorageAt(uint256,uint256)": {
					"notice": "Reads `length` bytes of storage in the currents contract"
				},
				"getThreshold()": {
					"notice": "Returns the number of required confirmations for a Safe transaction aka the threshold."
				},
				"getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": {
					"notice": "Returns transaction hash to be signed by owners."
				},
				"isModuleEnabled(address)": {
					"notice": "Returns if an module is enabled"
				},
				"isOwner(address)": {
					"notice": "Returns if `owner` is an owner of the Safe."
				},
				"nonce()": {
					"notice": "Returns the nonce of the Safe contract."
				},
				"removeOwner(address,address,uint256)": {
					"notice": "Removes the owner `owner` from the Safe and updates the threshold to `_threshold`."
				},
				"setFallbackHandler(address)": {
					"notice": "Set Fallback Handler to `handler` for the Safe."
				},
				"setGuard(address)": {
					"notice": "Set Transaction Guard `guard` for the Safe. Make sure you trust the guard."
				},
				"setModuleGuard(address)": {
					"notice": "Set Module Guard `moduleGuard` for the Safe. Make sure you trust the module guard."
				},
				"setup(address[],uint256,address,bytes,address,address,uint256,address)": {
					"notice": "Sets an initial storage of the Safe contract."
				},
				"signedMessages(bytes32)": {
					"notice": "Returns a uint if the messageHash is signed by the owner."
				},
				"swapOwner(address,address,address)": {
					"notice": "Replaces the owner `oldOwner` in the Safe with `newOwner`."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Safe.sol": "Safe"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Safe.sol": {
			"keccak256": "0x15293dea648039b9aa5e87a036afaa0abe1f502d9aca595629498d70c8200f9c",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://2c3826ed9e8433702040fa418828aed5112890c53a0d7f4cb95266f439eaf4fd",
				"dweb:/ipfs/QmbJz2aFBWbozqqCpwcA72KNWXes7fZXt2Qqq82Si7twWh"
			]
		},
		"contracts/base/Executor.sol": {
			"keccak256": "0x6e0179af7f1475fead89a26badd804382f1661e82e0cc27f3cfa6b08ac970862",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://2c554382df14528f2898d41b84d5b6f8041eb0027543348238e4d0674c6ab903",
				"dweb:/ipfs/QmQfbBqyTD8jLmbkogNVrYNGPKTKneRo2x8yX7Xt6f4dP9"
			]
		},
		"contracts/base/FallbackManager.sol": {
			"keccak256": "0x90d239a942c9660331584828e2408d7e2303c52c1cbabd76e7444a199071da97",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://92e584ff1b9a8b2e0040c14541ed171c3e35a5fc6bc57b70ab62d07e7cdecdea",
				"dweb:/ipfs/QmZBfmoda68mV3E165yCPsfSWWuU3sx2suPcFvmVouZdZA"
			]
		},
		"contracts/base/GuardManager.sol": {
			"keccak256": "0x03f865684d34e85ba66149777aa78a35113287865ccffa3c264488f5ebcf6511",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://194d8d1ea31e3dc8de7c0a45d17d62a844da344c5781ba2b0dac802ab2bbb59a",
				"dweb:/ipfs/Qmbt8mGHZggtKQBCF6WERaGAVUfEWG8QAHds8at9rfbosA"
			]
		},
		"contracts/base/ModuleManager.sol": {
			"keccak256": "0x39dcdb6d0ade05f4f62276bad36722ee1899e3ef33b2dddafe42579ae74b35da",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://dfced9b5aaa08ae166c3661e67a32b6276aae7a499645578edc3595eb391fac3",
				"dweb:/ipfs/QmSN2ziqAGzgkyAkiMU5F5ZJw6bF78Z5gRPLanZVwjfpvh"
			]
		},
		"contracts/base/OwnerManager.sol": {
			"keccak256": "0x8209c448268433d5b343eb0fa2e976aa4407fde410403e3f3c6facbb1455a5ed",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://289717f91a322643c3385fb4196aa21f972fe06c01c0587fa56d7d955f11d3b9",
				"dweb:/ipfs/QmNwYzC2mCvRJ6UozAjrhTMyGuyHjMxAuQNCTrwEfuR5Px"
			]
		},
		"contracts/common/NativeCurrencyPaymentFallback.sol": {
			"keccak256": "0x3ddcd4130c67326033dcf773d2d87d7147e3a8386993ea3ab3f1c38da406adba",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://740a729397b6a0d903f4738a50e856d4e5039555024937b148d97529525dbfa9",
				"dweb:/ipfs/QmQJuNVvHbkeJ6jjd75D8FsZBPXH6neoGBZdQgtsA82E7g"
			]
		},
		"contracts/common/SecuredTokenTransfer.sol": {
			"keccak256": "0x90afdfd7ecdf7d18e4a3d73a55e51387713bb69dfcc4490ff7348d6126ba3197",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://e9d26e093054f947b93b2a40508d14762793d8ce8ca4563481cd33caf379c74f",
				"dweb:/ipfs/QmU9aMgMPMLmHLNnrC7emQ5ccaiLiqMv6WEfTmATQP1LqF"
			]
		},
		"contracts/common/SelfAuthorized.sol": {
			"keccak256": "0x6b31f149b2f8e76487a03c8aeeabfc9b32407d4d917e39331c28dafe7cee77d5",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://a4736edb9b16d02736f4bf8c02c1cd80381ec33de48ffc59669529f184e82f66",
				"dweb:/ipfs/QmbcYa5r5vaVDfGyMmQc42uajtDwLYgrhYV3Eb3AFWdPjf"
			]
		},
		"contracts/common/SignatureDecoder.sol": {
			"keccak256": "0xc811f101acdc7e0bf0c04307a36889a5a5834a2163e4ad2d20f7bd3fd95d8796",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://378c9a0f76b622b30bca3c3904f5460eaefab7f1fd4d01f7b745ecaba2b6075e",
				"dweb:/ipfs/QmVnHFcM1cPsBMKnQBnca1RozKSjaRb2HDZ929UV5evb4P"
			]
		},
		"contracts/common/Singleton.sol": {
			"keccak256": "0xcab7c6e5fb6d7295a9343f72fec26a2f632ddfe220a6f267b5c5a1eb2f9bce50",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://dd1c31d5787ef590a60f6b0dbc74d09e6fe4d3ad2f0529940d662bf315521cde",
				"dweb:/ipfs/QmSAS5DYrGksJe4cPQ4wLrveXa1CjxAuEiohcLpPG5h2bo"
			]
		},
		"contracts/common/StorageAccessible.sol": {
			"keccak256": "0xfce71a03d9a54d9404db5d8cf177d93c2983a651070293e2fa2d8c4e5bba5a0c",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://b0f4025c048ce4759d2df73db83715f8458d501ee4a1b590bb0222447a1b96c0",
				"dweb:/ipfs/QmXahYVrfS7ogyhE3LDA1FKGodvzDAwuyc422djGJDQXWf"
			]
		},
		"contracts/external/SafeMath.sol": {
			"keccak256": "0x5f856674d9be11344c5899deb43364e19baa75bc881cada4c159938270b2bd89",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://351c66e5fe92c0a51f79d133521545dabdd3f756312a7b1428c1fc813c512a1c",
				"dweb:/ipfs/QmdnrRmgef8SdamEU6fVEqFD5RQwXeDFTfQuZEfX2vxC4x"
			]
		},
		"contracts/interfaces/IERC165.sol": {
			"keccak256": "0x779ed3893a8812e383670b755f65c7727e9343dadaa4d7a4aa7f4aa35d859fdb",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://bb2039e1459ace1e68761e873632fc339866332f9f5ecb7452a0bc3a3b847e89",
				"dweb:/ipfs/QmYXvDQXJnDkXFvsvKLyZXaAv4x42qvtbtmwHftP4RKX38"
			]
		},
		"contracts/interfaces/IFallbackManager.sol": {
			"keccak256": "0x132930e9dbd31bcf89269fc2399cecf0f2d0366408a1ea8292e6249b47010182",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://720ef7e9e1b2a52aaa6daacd233be267963f6a0c126331bdcd52cb99c6f7cff4",
				"dweb:/ipfs/QmdwSu5qRAQxangzDFGHEsLAZt9UNJiS6M7yqFBNYe19Py"
			]
		},
		"contracts/interfaces/IGuardManager.sol": {
			"keccak256": "0xca10c744bd853f69f3c63282a2560462085a253c6034f108f97a575ec2fd61ab",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://2dc7168a23df7c619762fdd1c315560b091761ab93acca60d3e8a53a9cf07f3e",
				"dweb:/ipfs/QmULbk2n7J2BUwpQFt27Gah39vQpUFmcfTXGbBj73Mpy9y"
			]
		},
		"contracts/interfaces/IModuleManager.sol": {
			"keccak256": "0xf54fec9a87bbbb9585dd6223f75a178992e5de6ba8670aeb2197d0ba8b538251",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://af8932e56ee56dc862f30324eebbbfcd6b22eb99d138e451ba07d9c9d2edb0ab",
				"dweb:/ipfs/Qme37PajhVFJbLB3mVLZNFiaAgvunB6J9Sfy2QaVXrFG4N"
			]
		},
		"contracts/interfaces/IOwnerManager.sol": {
			"keccak256": "0x001491dd52e268b2bb1a8fef7a77150da827f298ce858e8ed47aa257c55d528b",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://76e79ea650dd0424826f0a991661c6c0462d3a83abfc372eb56feeb6d2ac62e5",
				"dweb:/ipfs/QmTefeqDUJAbKJZbgz1msytPjrjYhwmAZNeJz96aLruogY"
			]
		},
		"contracts/interfaces/ISafe.sol": {
			"keccak256": "0xfa79ca5f90a5b269b4f9c519df65fdb2f5b7e9f20d3c7bd95edc530e4f006773",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://5f75cd309528d3e85b34ecd4f582ccc9c98719b0da6f6e257f410005ff96c840",
				"dweb:/ipfs/Qmcs7jx9bZAg3JHzVcPDdKKEBPKXkQ7NruhCPh78z5Ewcj"
			]
		},
		"contracts/interfaces/ISignatureValidator.sol": {
			"keccak256": "0xae1d485aedcb9dd2c4a4eaba3d4183ccefc5604d0160b9ae0eaf1fe5566df7e2",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://e82573b58fc8cfe5f9b7fed13bbe619599472973974099a7b423d340f6ed7f52",
				"dweb:/ipfs/QmPpPjdHRkbc1W1nXeXBEJSy7EjUAUfC61oGS4Dogt6qfq"
			]
		},
		"contracts/libraries/Enum.sol": {
			"keccak256": "0x443e310b464e7580bb2fd50e3a2d323efbbfa53e2433832eec509e127ecd6261",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://157e5965acf507aa5f0fd50c2855a489a773cae99ca03ca7479a7ea3986badde",
				"dweb:/ipfs/QmaVyMAw8a6oaSR2aDw5U7JbW76qkunpqFfZn5pTD5pjvD"
			]
		},
		"contracts/libraries/ErrorMessage.sol": {
			"keccak256": "0xbf7acc89a8043ce232e0b3541963ca119be5ceda80a9de4c0bd6a5c87aa759fa",
			"license": "LGPL-3.0-only",
			"urls": [
				"bzz-raw://1077eedde60fd59647b72e17c9c266fcfa71bc0a160ae08c22b03a85ba22a01f",
				"dweb:/ipfs/QmWUUZ1UQ7ppubRZ4uYSUfxR94jmrq9kmvsnboWuaSaUQg"
			]
		}
	},
	"version": 1
}